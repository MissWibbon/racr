"use strict";
/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var request_1 = require("./request");
var filelink_1 = require("./../filelink");
var filestack_error_1 = require("./../../filestack_error");
var schema_1 = require("./../../schema");
/**
 *
 * @private
 * @param session
 * @param url
 * @param opts
 * @param token
 * @param security
 */
exports.storeURL = function (session, url, opts, token, security) {
    if (!url || typeof url !== 'string') {
        throw new Error('url is required for storeURL');
    }
    var validateRes = schema_1.getValidator(schema_1.StoreParamsSchema)(opts);
    if (validateRes.errors.length) {
        throw new filestack_error_1.FilestackError("Invalid store params", validateRes.errors);
    }
    session.policy = security && security.policy || session.policy;
    session.signature = security && security.signature || session.signature;
    var baseURL = new filelink_1.Filelink(url, session.apikey);
    baseURL.setCname(session.cname);
    baseURL.setBase64(true);
    if (session.policy && session.signature) {
        baseURL.security({
            policy: session.policy,
            signature: session.signature,
        });
    }
    baseURL.store(opts);
    var options = {};
    if (token) {
        var CancelToken = request_1.request.CancelToken;
        var source = CancelToken.source();
        token.cancel = source.cancel;
        options.cancelToken = source.token;
    }
    return request_1.request.get(baseURL.toString(), options).then(function (res) {
        if (res.data && res.data.handle) {
            return tslib_1.__assign({}, res.data, { mimetype: res.data.type });
        }
        throw new filestack_error_1.FilestackError("Invalid store response " + JSON.stringify(res.data));
    });
};
