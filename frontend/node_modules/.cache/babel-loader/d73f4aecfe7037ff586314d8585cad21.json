{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n}; // -----------------------------------------------------------------------------\n// Init\n\n\nvar initializeGlobalNamespace = function initializeGlobalNamespace() {\n  var namespace = void 0;\n\n  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {\n    namespace = window.filestackInternals;\n\n    if (!namespace) {\n      namespace = {};\n      window.filestackInternals = namespace;\n    }\n\n    if (!namespace.loader) {\n      namespace.loader = {\n        modules: {}\n      };\n    }\n  }\n\n  return namespace;\n};\n\nvar filestackInternals = initializeGlobalNamespace(); // -----------------------------------------------------------------------------\n// Modules loading\n// All modules share global \"register\", so different instances of loader can\n// communicate which modules were already loaded and which not.\n\nvar modules = filestackInternals && filestackInternals.loader.modules;\n\nvar loadModule = function loadModule(url, moduleId) {\n  var moduleDefinition = modules[url];\n\n  if (!moduleDefinition) {\n    modules[url] = {};\n    moduleDefinition = modules[url];\n  }\n\n  if (moduleDefinition.instance) {\n    return Promise.resolve(moduleDefinition.instance);\n  }\n\n  if (moduleDefinition.promise) {\n    return moduleDefinition.promise;\n  }\n\n  var promise = new Promise(function (resolve, reject) {\n    var embedScript = function embedScript() {\n      moduleDefinition.resolvePromise = resolve;\n      var script = document.createElement('script');\n      script.src = url;\n      script.onerror = reject;\n      if (moduleId) script.id = moduleId;\n      document.body.appendChild(script);\n    };\n\n    var checkIfDomReady = function checkIfDomReady() {\n      if (document.readyState === 'complete') {\n        embedScript();\n      } else {\n        setTimeout(checkIfDomReady, 50);\n      }\n    };\n\n    checkIfDomReady();\n  });\n  moduleDefinition.promise = promise;\n  return promise;\n};\n\nvar registerReadyModule = function registerReadyModule(instance, moduleId) {\n  var thisScript = void 0;\n\n  if (moduleId && document.getElementById(moduleId)) {\n    thisScript = document.getElementById(moduleId);\n  } else {\n    var scriptTags = document.getElementsByTagName('script');\n    thisScript = scriptTags[scriptTags.length - 1];\n  }\n\n  var url = thisScript.getAttribute('src');\n  var moduleDefinition = modules[url];\n\n  if (moduleDefinition && moduleDefinition.resolvePromise) {\n    moduleDefinition.instance = instance;\n    moduleDefinition.resolvePromise(instance);\n    delete moduleDefinition.promise;\n    delete moduleDefinition.resolvePromise;\n  }\n}; // -----------------------------------------------------------------------------\n// CSS loading\n\n\nvar loadCss = function loadCss(url) {\n  var alreadyAddedThisTag = document.querySelector('link[href=\"' + url + '\"]');\n\n  if (alreadyAddedThisTag !== null) {\n    return Promise.resolve();\n  }\n\n  return new Promise(function (resolve) {\n    var head = document.getElementsByTagName('head')[0];\n    var link = document.createElement('link');\n\n    var loaded = function loaded() {\n      resolve();\n      link.removeEventListener('load', loaded);\n    };\n\n    link.rel = 'stylesheet';\n    link.href = url;\n    link.addEventListener('load', loaded);\n    head.appendChild(link);\n  });\n};\n\nvar knownModuleIds = {\n  picker: '__filestack-picker-module'\n};\nexport { loadModule, registerReadyModule, loadCss, knownModuleIds };","map":null,"metadata":{},"sourceType":"module"}