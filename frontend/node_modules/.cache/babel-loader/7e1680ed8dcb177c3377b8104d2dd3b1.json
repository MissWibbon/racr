{"ast":null,"code":"/*\n * Copyright (c) 2018 by Filestack.\n * Some rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { request } from './request';\nimport { Filelink } from './../filelink';\nimport { FilestackError } from './../../filestack_error';\nimport { getValidator, StoreParamsSchema } from './../../schema';\n/**\n *\n * @private\n * @param session\n * @param url\n * @param opts\n * @param token\n * @param security\n */\n\nexport var storeURL = function (session, url, opts, token, security) {\n  if (!url || typeof url !== 'string') {\n    throw new Error('url is required for storeURL');\n  }\n\n  var validateRes = getValidator(StoreParamsSchema)(opts);\n\n  if (validateRes.errors.length) {\n    throw new FilestackError(\"Invalid store params\", validateRes.errors);\n  }\n\n  session.policy = security && security.policy || session.policy;\n  session.signature = security && security.signature || session.signature;\n  var baseURL = new Filelink(url, session.apikey);\n  baseURL.setCname(session.cname);\n  baseURL.setBase64(true);\n\n  if (session.policy && session.signature) {\n    baseURL.security({\n      policy: session.policy,\n      signature: session.signature\n    });\n  }\n\n  baseURL.store(opts);\n  var options = {};\n\n  if (token) {\n    var CancelToken = request.CancelToken;\n    var source = CancelToken.source();\n    token.cancel = source.cancel;\n    options.cancelToken = source.token;\n  }\n\n  return request.get(baseURL.toString(), options).then(function (res) {\n    if (res.data && res.data.handle) {\n      return tslib_1.__assign({}, res.data, {\n        mimetype: res.data.type\n      });\n    }\n\n    throw new FilestackError(\"Invalid store response \" + JSON.stringify(res.data));\n  });\n};","map":null,"metadata":{},"sourceType":"module"}