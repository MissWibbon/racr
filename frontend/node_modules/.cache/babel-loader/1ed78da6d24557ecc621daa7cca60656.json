{"ast":null,"code":"/*\n * Copyright (c) 2018 by Filestack.\n * Some rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FilestackError, FilestackErrorType } from './../../filestack_error';\nimport { getValidator, SecurityParamsSchema } from './../../schema';\nimport { isNode, requireNode } from '../utils';\n/**\n * Returns Filestack base64 policy and HMAC-SHA256 signature\n *\n * ### Example\n *\n * ```js\n * import * as filestack from 'filestack-js';\n *\n * const jsonPolicy = { 'expiry': 253381964415 };\n * const security = filestack.getSecurity(jsonPolicy, '<YOUR_APP_SECRET>');\n * ```\n *\n * @param policyOptions\n * @param appSecret\n */\n\nexport var getSecurity = function (policyOptions, appSecret) {\n  if (!isNode()) {\n    throw new Error('getSecurity is only supported in nodejs');\n  }\n\n  var validateRes = getValidator(SecurityParamsSchema)(policyOptions);\n\n  if (validateRes.errors.length) {\n    throw new FilestackError(\"Invalid security params\", validateRes.errors, FilestackErrorType.VALIDATION);\n  }\n\n  var policy = Buffer.from(JSON.stringify(policyOptions)).toString('base64');\n  var signature = requireNode('crypto').createHmac('sha256', appSecret).update(policy).digest('hex');\n  return {\n    policy: policy,\n    signature: signature\n  };\n};\n/**\n * Check webhook signature\n *\n * @param secret - app secred\n * @param rawBody - unchanged raw webhook body\n * @param toCompare - data from wh response headers\n */\n\nexport var validateWebhookSignature = function (secret, rawBody, toCompare) {\n  if (!isNode()) {\n    throw new Error('validateWebhookSignature is only supported in nodejs');\n  }\n\n  var hash = requireNode('crypto').createHmac('sha256', secret).update(toCompare.timestamp + \".\" + rawBody).digest('hex');\n  return hash === toCompare.signature;\n};","map":null,"metadata":{},"sourceType":"module"}