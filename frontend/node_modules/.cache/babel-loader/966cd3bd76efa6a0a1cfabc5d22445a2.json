{"ast":null,"code":"'use strict';\n\nvar urilib = require('url');\n\nvar attribute = require('./attribute');\n\nvar helpers = require('./helpers');\n\nvar scanSchema = require('./scan').scan;\n\nvar ValidatorResult = helpers.ValidatorResult;\nvar SchemaError = helpers.SchemaError;\nvar SchemaContext = helpers.SchemaContext; //var anonymousBase = 'vnd.jsonschema:///';\n\nvar anonymousBase = '/';\n/**\n * Creates a new Validator object\n * @name Validator\n * @constructor\n */\n\nvar Validator = function Validator() {\n  // Allow a validator instance to override global custom formats or to have their\n  // own custom formats.\n  this.customFormats = Object.create(Validator.prototype.customFormats);\n  this.schemas = {};\n  this.unresolvedRefs = []; // Use Object.create to make this extensible without Validator instances stepping on each other's toes.\n\n  this.types = Object.create(types);\n  this.attributes = Object.create(attribute.validators);\n}; // Allow formats to be registered globally.\n\n\nValidator.prototype.customFormats = {}; // Hint at the presence of a property\n\nValidator.prototype.schemas = null;\nValidator.prototype.types = null;\nValidator.prototype.attributes = null;\nValidator.prototype.unresolvedRefs = null;\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param schema\n * @param urn\n * @return {Object}\n */\n\nValidator.prototype.addSchema = function addSchema(schema, base) {\n  var self = this;\n\n  if (!schema) {\n    return null;\n  }\n\n  var scan = scanSchema(base || anonymousBase, schema);\n  var ourUri = base || schema.id;\n\n  for (var uri in scan.id) {\n    this.schemas[uri] = scan.id[uri];\n  }\n\n  for (var uri in scan.ref) {\n    this.unresolvedRefs.push(uri);\n  }\n\n  this.unresolvedRefs = this.unresolvedRefs.filter(function (uri) {\n    return typeof self.schemas[uri] === 'undefined';\n  });\n  return this.schemas[ourUri];\n};\n\nValidator.prototype.addSubSchemaArray = function addSubSchemaArray(baseuri, schemas) {\n  if (!(schemas instanceof Array)) return;\n\n  for (var i = 0; i < schemas.length; i++) {\n    this.addSubSchema(baseuri, schemas[i]);\n  }\n};\n\nValidator.prototype.addSubSchemaObject = function addSubSchemaArray(baseuri, schemas) {\n  if (!schemas || typeof schemas != 'object') return;\n\n  for (var p in schemas) {\n    this.addSubSchema(baseuri, schemas[p]);\n  }\n};\n/**\n * Sets all the schemas of the Validator instance.\n * @param schemas\n */\n\n\nValidator.prototype.setSchemas = function setSchemas(schemas) {\n  this.schemas = schemas;\n};\n/**\n * Returns the schema of a certain urn\n * @param urn\n */\n\n\nValidator.prototype.getSchema = function getSchema(urn) {\n  return this.schemas[urn];\n};\n/**\n * Validates instance against the provided schema\n * @param instance\n * @param schema\n * @param [options]\n * @param [ctx]\n * @return {Array}\n */\n\n\nValidator.prototype.validate = function validate(instance, schema, options, ctx) {\n  if (!options) {\n    options = {};\n  }\n\n  var propertyName = options.propertyName || 'instance'; // This will work so long as the function at uri.resolve() will resolve a relative URI to a relative URI\n\n  var base = urilib.resolve(options.base || anonymousBase, schema.id || '');\n\n  if (!ctx) {\n    ctx = new SchemaContext(schema, options, propertyName, base, Object.create(this.schemas));\n\n    if (!ctx.schemas[base]) {\n      ctx.schemas[base] = schema;\n    }\n\n    var found = scanSchema(base, schema);\n\n    for (var n in found.id) {\n      var sch = found.id[n];\n      ctx.schemas[n] = sch;\n    }\n  }\n\n  if (schema) {\n    var result = this.validateSchema(instance, schema, options, ctx);\n\n    if (!result) {\n      throw new Error('Result undefined');\n    }\n\n    return result;\n  }\n\n  throw new SchemaError('no schema specified', schema);\n};\n/**\n* @param Object schema\n* @return mixed schema uri or false\n*/\n\n\nfunction shouldResolve(schema) {\n  var ref = typeof schema === 'string' ? schema : schema.$ref;\n  if (typeof ref == 'string') return ref;\n  return false;\n}\n/**\n * Validates an instance against the schema (the actual work horse)\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @private\n * @return {ValidatorResult}\n */\n\n\nValidator.prototype.validateSchema = function validateSchema(instance, schema, options, ctx) {\n  var result = new ValidatorResult(instance, schema, options, ctx); // Support for the true/false schemas\n\n  if (typeof schema === 'boolean') {\n    if (schema === true) {\n      // `true` is always valid\n      schema = {};\n    } else if (schema === false) {\n      // `false` is always invalid\n      schema = {\n        type: []\n      };\n    }\n  } else if (!schema) {\n    // This might be a string\n    throw new Error(\"schema is undefined\");\n  }\n\n  if (schema['extends']) {\n    if (schema['extends'] instanceof Array) {\n      var schemaobj = {\n        schema: schema,\n        ctx: ctx\n      };\n      schema['extends'].forEach(this.schemaTraverser.bind(this, schemaobj));\n      schema = schemaobj.schema;\n      schemaobj.schema = null;\n      schemaobj.ctx = null;\n      schemaobj = null;\n    } else {\n      schema = helpers.deepMerge(schema, this.superResolve(schema['extends'], ctx));\n    }\n  } // If passed a string argument, load that schema URI\n\n\n  var switchSchema;\n\n  if (switchSchema = shouldResolve(schema)) {\n    var resolved = this.resolve(schema, switchSchema, ctx);\n    var subctx = new SchemaContext(resolved.subschema, options, ctx.propertyPath, resolved.switchSchema, ctx.schemas);\n    return this.validateSchema(instance, resolved.subschema, options, subctx);\n  }\n\n  var skipAttributes = options && options.skipAttributes || []; // Validate each schema attribute against the instance\n\n  for (var key in schema) {\n    if (!attribute.ignoreProperties[key] && skipAttributes.indexOf(key) < 0) {\n      var validatorErr = null;\n      var validator = this.attributes[key];\n\n      if (validator) {\n        validatorErr = validator.call(this, instance, schema, options, ctx);\n      } else if (options.allowUnknownAttributes === false) {\n        // This represents an error with the schema itself, not an invalid instance\n        throw new SchemaError(\"Unsupported attribute: \" + key, schema);\n      }\n\n      if (validatorErr) {\n        result.importErrors(validatorErr);\n      }\n    }\n  }\n\n  if (typeof options.rewrite == 'function') {\n    var value = options.rewrite.call(this, instance, schema, options, ctx);\n    result.instance = value;\n  }\n\n  return result;\n};\n/**\n* @private\n* @param Object schema\n* @param SchemaContext ctx\n* @returns Object schema or resolved schema\n*/\n\n\nValidator.prototype.schemaTraverser = function schemaTraverser(schemaobj, s) {\n  schemaobj.schema = helpers.deepMerge(schemaobj.schema, this.superResolve(s, schemaobj.ctx));\n};\n/**\n* @private\n* @param Object schema\n* @param SchemaContext ctx\n* @returns Object schema or resolved schema\n*/\n\n\nValidator.prototype.superResolve = function superResolve(schema, ctx) {\n  var ref;\n\n  if (ref = shouldResolve(schema)) {\n    return this.resolve(schema, ref, ctx).subschema;\n  }\n\n  return schema;\n};\n/**\n* @private\n* @param Object schema\n* @param Object switchSchema\n* @param SchemaContext ctx\n* @return Object resolved schemas {subschema:String, switchSchema: String}\n* @throws SchemaError\n*/\n\n\nValidator.prototype.resolve = function resolve(schema, switchSchema, ctx) {\n  switchSchema = ctx.resolve(switchSchema); // First see if the schema exists under the provided URI\n\n  if (ctx.schemas[switchSchema]) {\n    return {\n      subschema: ctx.schemas[switchSchema],\n      switchSchema: switchSchema\n    };\n  } // Else try walking the property pointer\n\n\n  var parsed = urilib.parse(switchSchema);\n  var fragment = parsed && parsed.hash;\n  var document = fragment && fragment.length && switchSchema.substr(0, switchSchema.length - fragment.length);\n\n  if (!document || !ctx.schemas[document]) {\n    throw new SchemaError(\"no such schema <\" + switchSchema + \">\", schema);\n  }\n\n  var subschema = helpers.objectGetPath(ctx.schemas[document], fragment.substr(1));\n\n  if (subschema === undefined) {\n    throw new SchemaError(\"no such schema \" + fragment + \" located in <\" + document + \">\", schema);\n  }\n\n  return {\n    subschema: subschema,\n    switchSchema: switchSchema\n  };\n};\n/**\n * Tests whether the instance if of a certain type.\n * @private\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @param type\n * @return {boolean}\n */\n\n\nValidator.prototype.testType = function validateType(instance, schema, options, ctx, type) {\n  if (typeof this.types[type] == 'function') {\n    return this.types[type].call(this, instance);\n  }\n\n  if (type && typeof type == 'object') {\n    var res = this.validateSchema(instance, type, options, ctx);\n    return res === undefined || !(res && res.errors.length);\n  } // Undefined or properties not on the list are acceptable, same as not being defined\n\n\n  return true;\n};\n\nvar types = Validator.prototype.types = {};\n\ntypes.string = function testString(instance) {\n  return typeof instance == 'string';\n};\n\ntypes.number = function testNumber(instance) {\n  // isFinite returns false for NaN, Infinity, and -Infinity\n  return typeof instance == 'number' && isFinite(instance);\n};\n\ntypes.integer = function testInteger(instance) {\n  return typeof instance == 'number' && instance % 1 === 0;\n};\n\ntypes.boolean = function testBoolean(instance) {\n  return typeof instance == 'boolean';\n};\n\ntypes.array = function testArray(instance) {\n  return Array.isArray(instance);\n};\n\ntypes['null'] = function testNull(instance) {\n  return instance === null;\n};\n\ntypes.date = function testDate(instance) {\n  return instance instanceof Date;\n};\n\ntypes.any = function testAny(instance) {\n  return true;\n};\n\ntypes.object = function testObject(instance) {\n  // TODO: fix this - see #15\n  return instance && typeof instance === 'object' && !(instance instanceof Array) && !(instance instanceof Date);\n};\n\nmodule.exports = Validator;","map":null,"metadata":{},"sourceType":"script"}