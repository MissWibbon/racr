{"ast":null,"code":"/*\n * Copyright (c) 2018 by Filestack.\n * Some rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { UploadParamsSchema } from './upload.schema';\nexport var PickerParamsSchema = {\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  title: 'Filestack Picker',\n  description: 'Filestack Picker Options',\n  type: 'object',\n  additionalProperties: false,\n  // required: ['container'],\n  properties: {\n    allowManualRetry: {\n      type: 'boolean'\n    },\n    accept: {\n      additionalProperties: false,\n      oneOf: [{\n        type: 'string'\n      }, {\n        type: 'array',\n        minItems: 1,\n        items: [{\n          type: 'string'\n        }]\n      }]\n    },\n    fromSources: {\n      type: 'array',\n      items: [{\n        type: 'string',\n        additionalProperties: false,\n        enum: ['local_file_system', 'url', 'imagesearch', 'facebook', 'instagram', 'googledrive', 'dropbox', 'webcam', 'video', 'audio', 'box', 'github', 'gmail', 'picasa', 'onedrive', 'onedriveforbusiness', 'clouddrive', 'googlephotos', 'customsource']\n      }]\n    },\n    container: {\n      format: 'HTMLContainer'\n    },\n    cleanupImageExif: {\n      oneOf: [{\n        type: 'boolean'\n      }, {\n        type: 'object',\n        additionalProperties: false,\n        properties: {\n          keepOrientation: {\n            type: 'boolean'\n          },\n          keepICCandAPP: {\n            type: 'boolean'\n          }\n        }\n      }]\n    },\n    displayMode: {\n      type: 'string',\n      enum: ['inline', 'overlay', 'dropPane']\n    },\n    concurrency: {\n      type: 'integer',\n      minimum: 1,\n      maximum: 20\n    },\n    customSourceContainer: {\n      type: 'string'\n    },\n    customSourcePath: {\n      type: 'string'\n    },\n    customSourceName: {\n      type: 'string'\n    },\n    disableStorageKey: {\n      type: 'boolean'\n    },\n    disableTransformer: {\n      type: 'boolean'\n    },\n    disableThumbnails: {\n      type: 'boolean'\n    },\n    exposeOriginalFile: {\n      type: 'boolean'\n    },\n    globalDropZone: {\n      type: 'boolean'\n    },\n    hideModalWhenUploading: {\n      type: 'boolean'\n    },\n    imageDim: {\n      type: 'array',\n      minItems: 2,\n      maxItems: 2,\n      items: [{\n        type: 'integer',\n        minimum: 1\n      }]\n    },\n    imageMax: {\n      type: 'array',\n      minItems: 2,\n      maxItems: 2,\n      items: [{\n        type: 'integer',\n        minimum: 1\n      }]\n    },\n    imageMin: {\n      type: 'array',\n      minItems: 2,\n      maxItems: 2,\n      items: [{\n        type: 'integer',\n        minimum: 1\n      }]\n    },\n    imageMinMaxBlock: {\n      type: 'boolean',\n      default: false\n    },\n    lang: {\n      type: 'string',\n      enum: ['ca', 'da', 'de', 'en', 'es', 'fr', 'he', 'it', 'ja', 'ko', 'nl', 'no', 'pl', 'pt', 'sv', 'ru', 'vi', 'zh', 'tr']\n    },\n    minFiles: {\n      type: 'integer',\n      minimum: 1,\n      maximum: 1000000\n    },\n    maxFiles: {\n      type: 'integer',\n      minimum: 1,\n      maximum: 1000000\n    },\n    maxSize: {\n      type: 'integer',\n      minimum: 1\n    },\n    modalSize: {\n      type: 'array',\n      minItems: 2,\n      maxItems: 2,\n      items: [{\n        type: 'integer',\n        minimum: 1,\n        maximum: 1000000\n      }]\n    },\n    rootId: {\n      type: 'string'\n    },\n    startUploadingWhenMaxFilesReached: {\n      type: 'boolean'\n    },\n    uploadInBackground: {\n      type: 'boolean'\n    },\n    videoResolution: {\n      type: 'string'\n    },\n    onCancel: {\n      format: 'callback'\n    },\n    onClose: {\n      format: 'callback'\n    },\n    onOpen: {\n      format: 'callback'\n    },\n    onFileSelected: {\n      format: 'callback'\n    },\n    onFileUploadStarted: {\n      format: 'callback'\n    },\n    onFileUploadFinished: {\n      format: 'callback'\n    },\n    onFileUploadFailed: {\n      format: 'callback'\n    },\n    onFileUploadProgress: {\n      format: 'callback'\n    },\n    onUploadStarted: {\n      format: 'callback'\n    },\n    onUploadDone: {\n      format: 'callback'\n    },\n    storeTo: {\n      additionalProperties: false,\n      type: 'object',\n      properties: {\n        filename: {\n          type: 'string'\n        },\n        location: {\n          $ref: 'locationsDef'\n        },\n        container: {\n          type: 'string'\n        },\n        path: {\n          type: 'string'\n        },\n        region: {\n          type: 'string'\n        },\n        access: {\n          type: 'string',\n          enum: ['public', 'private']\n        },\n        workflows: {\n          $ref: 'workflowsDef'\n        }\n      }\n    },\n    viewType: {\n      type: 'string',\n      enum: ['grid', 'list']\n    },\n    transformations: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        circle: {\n          type: 'boolean'\n        },\n        rotate: {\n          type: 'boolean'\n        },\n        force: {\n          type: 'boolean'\n        },\n        crop: {\n          oneOf: [{\n            type: 'boolean'\n          }, {\n            type: 'object',\n            additionalProperties: false,\n            properties: {\n              force: {\n                type: 'boolean'\n              },\n              aspectRatio: {\n                type: 'number'\n              }\n            }\n          }]\n        }\n      }\n    },\n    customText: {\n      type: 'object',\n      patternProperties: {\n        '.*': {\n          type: 'string'\n        }\n      }\n    },\n    dropPane: {\n      type: 'object',\n      properties: {\n        cropFiles: {\n          type: 'boolean'\n        },\n        customText: {\n          type: 'string'\n        },\n        disableClick: {\n          type: 'boolean'\n        },\n        overlay: {\n          type: 'boolean'\n        },\n        showIcon: {\n          type: 'boolean'\n        },\n        showProgress: {\n          type: 'boolean'\n        },\n        onDragEnter: {\n          format: 'callback'\n        },\n        onProgress: {\n          format: 'callback'\n        },\n        onDragLeave: {\n          format: 'callback'\n        },\n        onDragOver: {\n          format: 'callback'\n        },\n        onDrop: {\n          format: 'callback'\n        },\n        onSuccess: {\n          format: 'callback'\n        },\n        onError: {\n          format: 'callback'\n        },\n        onClick: {\n          format: 'callback'\n        }\n      }\n    },\n    errorsTimeout: {\n      type: 'number',\n      minimum: 0\n    },\n    customAuthText: {\n      type: 'object',\n      patternProperties: {\n        '.*': {\n          additionalProperties: false,\n          type: 'object',\n          required: ['top', 'bottom'],\n          properties: {\n            top: {\n              type: 'string'\n            },\n            bottom: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    },\n    uploadConfig: {\n      type: 'object',\n      additionalProperties: false,\n      properties: UploadParamsSchema.properties\n    },\n    useSentryBreadcrumbs: {\n      type: 'boolean'\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}