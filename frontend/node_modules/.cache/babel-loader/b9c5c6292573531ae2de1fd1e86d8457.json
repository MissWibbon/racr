{"ast":null,"code":"/*\n * Copyright (c) 2018 by Filestack.\n * Some rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { removeEmpty } from '../utils';\nimport { requestWithSource, request } from '../api/request';\nimport { FilestackError } from './../../filestack_error';\n/**\n * @private\n */\n\nexport var PICKER_KEY = '__fs_picker_token';\n/**\n * @private\n */\n\nvar CloudClient =\n/** @class */\nfunction () {\n  function CloudClient(session, options) {\n    this.cache = false;\n    this.session = session;\n    this.cloudApiUrl = session.urls.cloudApiUrl;\n\n    if (options && options.sessionCache) {\n      this.cache = options.sessionCache;\n    }\n  }\n\n  Object.defineProperty(CloudClient.prototype, \"token\", {\n    get: function () {\n      if (this.cache) {\n        var token = localStorage.getItem(PICKER_KEY);\n        if (token) return token;\n      }\n\n      return this._token;\n    },\n    set: function (key) {\n      if (this.cache) {\n        localStorage.setItem(PICKER_KEY, key);\n      }\n\n      this._token = key;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CloudClient.prototype.prefetch = function () {\n    var params = {\n      apikey: this.session.apikey\n    };\n    return requestWithSource().get(this.cloudApiUrl + \"/prefetch\", {\n      params: params\n    }).then(function (res) {\n      return res.data;\n    });\n  };\n\n  CloudClient.prototype.list = function (clouds, token) {\n    var _this = this;\n\n    var payload = {\n      apikey: this.session.apikey,\n      clouds: clouds,\n      flow: 'web',\n      token: this.token\n    };\n\n    if (this.session.policy && this.session.signature) {\n      payload.policy = this.session.policy;\n      payload.signature = this.session.signature;\n    }\n\n    var options = {};\n\n    if (token) {\n      var CancelToken = request.CancelToken;\n      var source = CancelToken.source();\n      token.cancel = source.cancel;\n      options.cancelToken = source.token;\n    }\n\n    return requestWithSource().post(this.cloudApiUrl + \"/folder/list\", payload, options).then(function (res) {\n      if (res.data && res.data.token) {\n        _this.token = res.data.token;\n      }\n\n      return res.data;\n    });\n  };\n\n  CloudClient.prototype.store = function (name, path, options, customSource, token) {\n    var _a;\n\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (customSource === void 0) {\n      customSource = {};\n    } // Default to S3\n\n\n    if (options.location === undefined) options.location = 's3';\n    var payload = {\n      apikey: this.session.apikey,\n      token: this.token,\n      flow: 'web',\n      clouds: (_a = {}, _a[name] = {\n        path: path,\n        store: removeEmpty(options)\n      }, _a)\n    };\n\n    if (name === 'customsource' && customSource.customSourcePath) {\n      payload.clouds.customsource.customSourcePath = customSource.customSourcePath;\n    }\n\n    if (name === 'customsource' && customSource.customSourceContainer) {\n      payload.clouds.customsource.customSourceContainer = customSource.customSourceContainer;\n    }\n\n    if (this.session.policy && this.session.signature) {\n      payload.policy = this.session.policy;\n      payload.signature = this.session.signature;\n    }\n\n    var requestOptions = {};\n\n    if (token) {\n      var CancelToken = request.CancelToken;\n      var source = CancelToken.source();\n      token.cancel = source.cancel;\n      requestOptions.cancelToken = source.token;\n    }\n\n    return requestWithSource().post(this.cloudApiUrl + \"/store/\", payload, requestOptions).then(function (res) {\n      if (res.data && res.data.token) {\n        _this.token = res.data.token;\n      }\n\n      if (res.data && res.data[name]) {\n        return res.data[name];\n      }\n\n      return res.data;\n    });\n  };\n\n  CloudClient.prototype.logout = function (name) {\n    var _a;\n\n    var payload = {\n      apikey: this.session.apikey,\n      flow: 'web',\n      token: this.token\n    };\n\n    if (name) {\n      payload.clouds = (_a = {}, _a[name] = {}, _a);\n    } else if (this.cache) {\n      // No name means logout of ALL clouds. Clear local session.\n      localStorage.removeItem(PICKER_KEY);\n    }\n\n    return requestWithSource().post(this.cloudApiUrl + \"/auth/logout\", payload).then(function (res) {\n      if (res.data && res.data[name]) {\n        return res.data[name];\n      }\n\n      return res.data;\n    });\n  };\n\n  CloudClient.prototype.metadata = function (url) {\n    var payload = {\n      apikey: this.session.apikey,\n      url: url\n    };\n\n    if (this.session.policy && this.session.signature) {\n      payload.policy = this.session.policy;\n      payload.signature = this.session.signature;\n    }\n\n    return requestWithSource().post(this.cloudApiUrl + \"/metadata\", payload).then(function (res) {\n      return res.data;\n    });\n  }; // OpenTok API Endpoints\n\n\n  CloudClient.prototype.tokInit = function (type) {\n    if (type !== 'video' && type !== 'audio') {\n      throw new FilestackError('Type must be one of video or audio.');\n    }\n\n    return requestWithSource().post(this.cloudApiUrl + \"/recording/\" + type + \"/init\").then(function (res) {\n      return res.data;\n    });\n  };\n\n  CloudClient.prototype.tokStart = function (type, key, sessionId) {\n    if (type !== 'video' && type !== 'audio') {\n      throw new FilestackError('Type must be one of video or audio.');\n    }\n\n    var payload = {\n      apikey: key,\n      session_id: sessionId\n    };\n    return requestWithSource().post(this.cloudApiUrl + \"/recording/\" + type + \"/start\", payload).then(function (res) {\n      return res.data;\n    });\n  };\n\n  CloudClient.prototype.tokStop = function (type, key, sessionId, archiveId) {\n    if (type !== 'video' && type !== 'audio') {\n      throw new FilestackError('Type must be one of video or audio.');\n    }\n\n    var payload = {\n      apikey: key,\n      session_id: sessionId,\n      archive_id: archiveId\n    };\n    return requestWithSource().post(this.cloudApiUrl + \"/recording/\" + type + \"/stop\", payload).then(function (res) {\n      return res.data;\n    });\n  };\n\n  return CloudClient;\n}();\n\nexport { CloudClient };","map":null,"metadata":{},"sourceType":"module"}