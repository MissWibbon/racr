{"ast":null,"code":"/*\n * Copyright (c) 2018 by Filestack.\n * Some rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Map } from './extensions';\nimport * as SparkMD5 from 'spark-md5';\nimport fileType from 'file-type';\nimport * as isutf8 from 'isutf8';\nvar mobileRegexp = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series[46]0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i;\n/**\n * Resolve cdn url based on handle type\n *\n * @private\n * @param session session object\n * @param handle file handle (hash, src://alias, url)\n */\n\nexport var resolveCdnUrl = function (session, handle) {\n  var cdnURL = session.urls.cdnUrl;\n\n  if (handle && (handle.indexOf('src:') === 0 || handle.indexOf('http') === 0)) {\n    if (!session.apikey) {\n      throw new Error('Api key is required when storage alias is provided');\n    } // apikey is required for alias or external sources call\n\n\n    return cdnURL + \"/\" + session.apikey;\n  }\n\n  return cdnURL;\n};\n/**\n * Resolve all urls with provided cnames\n *\n * @private\n * @param urls\n * @param cname\n */\n\nexport var resolveHost = function (urls, cname) {\n  if (!cname) {\n    return urls;\n  }\n\n  var hosts = /filestackapi.com|filestackcontent.com/i;\n  Object.keys(urls).forEach(function (key) {\n    urls[key] = urls[key].replace(hosts, cname);\n  });\n  return urls;\n};\n/**\n * Removes empty options from object\n *\n * @private\n * @param obj\n */\n\nexport var removeEmpty = function (obj) {\n  var newObj = tslib_1.__assign({}, obj);\n\n  Object.keys(newObj).forEach(function (k) {\n    return !newObj[k] && typeof newObj[k] !== 'boolean' && delete newObj[k];\n  });\n  return newObj;\n};\n/**\n * Returns information about current env (browser|nodejs)\n */\n\nexport var isNode = function () {\n  return typeof process !== 'undefined' && process.versions && process.versions.node;\n};\n/**\n * Returns if browser is a mobile device (if node env always return false)\n */\n\n/* istanbul ignore next */\n\nexport var isMobile = function () {\n  return !isNode() && navigator && navigator.userAgent && mobileRegexp.test(navigator.userAgent);\n};\n/**\n * Returns unique time\n */\n\nvar last;\nexport var uniqueTime = function () {\n  var time = Date.now();\n  last = time === last ? time + 1 : time;\n  return last;\n};\n/**\n * Generates random string with provided length\n *\n * @param len\n */\n\nexport var uniqueId = function (len) {\n  if (len === void 0) {\n    len = 10;\n  }\n\n  return new Array(len).join().replace(/(.|$)/g, function () {\n    return (Math.random() * 36 | 0).toString(36)[Math.random() < 0.5 ? 'toString' : 'toUpperCase']();\n  });\n};\n/**\n * Calculates a MD5 checksum for passed buffer\n * @private\n * @param data  Data to be hashed\n * @returns     base64 encoded MD5 hash\n */\n\nexport var md5 = function (data) {\n  if (isNode()) {\n    return requireNode('crypto').createHash('md5').update(data).digest('base64');\n  }\n  /* istanbul ignore next */\n\n\n  return btoa(SparkMD5.ArrayBuffer.hash(data, true));\n};\n/**\n * Check if input is a svg\n *\n * @param {Uint8Array | Buffer} file\n * @returns {string} - mimetype\n */\n\nexport var getMimetype = function (file, name) {\n  var type = fileType(file); // check x-ms and x-msi by extension\n\n  if (type && type.mime !== 'application/x-ms' && type.mime !== 'application/x-msi') {\n    return type.mime;\n  }\n\n  if (name && name.indexOf('.') > -1) {\n    var ext = name.split('.').pop();\n    var keys = Object.keys(Map);\n    var mapLen = keys.length;\n\n    for (var i = 0; i < mapLen; i++) {\n      if (Map[keys[i]].indexOf(ext) > -1) {\n        return keys[i];\n      }\n    }\n  }\n\n  try {\n    if (isutf8(file)) {\n      return 'text/plain';\n    }\n  } catch (e) {\n    /* istanbul ignore next */\n    console.warn('Additional mimetype checks (text/plain) are currently not supported for browsers');\n  } // this is only fallback, omit it in coverage\n\n  /* istanbul ignore next */\n\n\n  return 'application/octet-stream';\n};\n/**\n * return based string\n * @param data\n */\n\nexport var b64 = function (data, safeUrl) {\n  if (safeUrl === void 0) {\n    safeUrl = false;\n  }\n\n  var b64;\n\n  if (isNode()) {\n    b64 = Buffer.from(data).toString('base64');\n  } else {\n    b64 = btoa(data);\n  }\n\n  if (safeUrl) {\n    return b64.replace(/\\//g, '_').replace(/\\+/g, '-');\n  }\n\n  return b64;\n};\n/**\n * Hides require from buindling by weback to browser\n *\n * @param {string} name\n */\n\nexport var requireNode = function (name) {\n  if (!isNode()) {\n    return false;\n  }\n\n  return require && require(name);\n};\n/**\n * Return currently used filestack-js sdk version\n */\n\nexport var getVersion = function () {\n  if (isNode()) {\n    var rootArr = __dirname.split('/');\n\n    var fsIndex = rootArr.findIndex(function (e) {\n      return e === 'filestack-js';\n    });\n    var rootDir = rootArr.splice(0, fsIndex + 1).join('/');\n    return \"JS-\" + requireNode(rootDir + \"/package.json\").version;\n  }\n\n  return 'JS-3.9.0';\n};\n/**\n * Sanitize file name\n *\n * @param name\n * @param {bool} options  - enable,disable sanitizer, default enabled\n * @param {string} options.replacement - replacement for sanitized chars defaults to \"-\"\n * @param {string[]} options.exclude - array with excluded chars default - ['\\', '{', '}','|', '%', '`', '\"', \"'\", '~', '[', ']', '#', '|', '^', '<', '>']\n */\n\nexport var sanitizeName = function (name, options) {\n  if (options === void 0) {\n    options = true;\n  }\n\n  if (typeof options === 'boolean' && !options) {\n    return name;\n  }\n\n  var ext;\n  var replacement = typeof options !== 'boolean' && options.replacement ? options.replacement : '-';\n  var exclude = typeof options !== 'boolean' && options.exclude ? options.exclude : ['\\\\', '{', '}', '|', '%', '`', '\"', \"'\", '~', '[', ']', '#', '|', '^', '<', '>'];\n\n  if (!name || name.length === 0) {\n    return 'undefined';\n  }\n\n  var fileParts = name.split('.');\n\n  if (fileParts.length > 1) {\n    ext = fileParts.pop();\n  }\n\n  return \"\" + fileParts.join('_').split('').map(function (char) {\n    return exclude.indexOf(char) > -1 ? replacement : char;\n  }).join('') + (ext ? '.' + ext : '');\n};\n/**\n * Filter object to given fields\n *\n * @param toFilter\n * @param requiredFields\n */\n\nexport var filterObject = function (toFilter, requiredFields) {\n  if (!requiredFields || requiredFields.length === 0) {\n    return toFilter;\n  }\n\n  return Object.keys(toFilter).filter(function (f) {\n    return requiredFields.indexOf(f) > -1;\n  }).reduce(function (obj, key) {\n    var _a;\n\n    return tslib_1.__assign({}, obj, (_a = {}, _a[key] = toFilter[key], _a));\n  }, {});\n};","map":null,"metadata":{},"sourceType":"module"}