{"ast":null,"code":"import * as tslib_1 from \"tslib\";\n/*\n * Copyright (c) 2019 by Filestack.\n * Some rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { md5, sanitizeName } from './../../utils';\n/**\n * File representation to unify file object in nodejs and browser\n *\n * @export\n * @class File\n */\n\nvar File =\n/** @class */\nfunction () {\n  function File(_file, _sanitizeOptions) {\n    this._file = _file;\n    this._sanitizeOptions = _sanitizeOptions;\n    this._file.name = sanitizeName(this._file.name, this._sanitizeOptions);\n  }\n\n  Object.defineProperty(File.prototype, \"name\", {\n    /**\n     * Returns file name\n     *\n     * @returns {string}\n     * @memberof File\n     */\n    get: function () {\n      return this._file.name;\n    },\n\n    /**\n     * Sets new file name  and cleanup extra chars\n     *\n     * @memberof File\n     */\n    set: function (val) {\n      this._file.name = sanitizeName(val, this._sanitizeOptions);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(File.prototype, \"filename\", {\n    /**\n     * Alias for name getter\n     *\n     * @readonly\n     * @type {string}\n     * @memberof File\n     */\n    get: function () {\n      return this.name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(File.prototype, \"customName\", {\n    /**\n     * Sets custom name using string or function\n     * Name will be sanitized\n     *\n     * @memberof File\n     */\n    set: function (val) {\n      switch (typeof val) {\n        case 'string':\n          this.name = val;\n          break;\n\n        case 'function':\n          var newName = val(this);\n\n          if (typeof newName !== 'string') {\n            throw new Error(\"Name function must return a string. Current return type is \" + typeof val);\n          }\n\n          this.name = val(this);\n          break;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(File.prototype, \"type\", {\n    /**\n     * Returns file type\n     *\n     * @default 'application/octet-stream'\n     * @returns {string}\n     * @memberof File\n     */\n    get: function () {\n      /* istanbul ignore next */\n      return this._file.type || 'application/octet-stream';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(File.prototype, \"mimetype\", {\n    /**\n     * Alias for file type\n     *\n     * @readonly\n     * @type {string}\n     * @memberof File\n     */\n    get: function () {\n      return this.type;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(File.prototype, \"size\", {\n    /**\n     * Returns file size\n     *\n     * @returns {number}\n     * @memberof File\n     */\n    get: function () {\n      return this._file.size;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns number of parts according to part size\n   *\n   * @param {number} size - part size in bytes\n   * @returns {number}\n   * @memberof File\n   */\n\n  File.prototype.getPartsCount = function (size) {\n    return Math.ceil(this._file.size / size);\n  };\n  /**\n   * Returns part metadata\n   *\n   * @param {number} [partNum=0]\n   * @param {*} size\n   * @returns {FilePartMetadata}\n   * @memberof File\n   */\n\n\n  File.prototype.getPartMetadata = function (partNum, size) {\n    var startByte = size * partNum;\n\n    if (startByte > this._file.size) {\n      throw new Error(\"Start byte of the part is higher than buffer size\");\n    }\n\n    var endByte = Math.min(startByte + size, this._file.size);\n    return {\n      partNumber: partNum,\n      startByte: startByte,\n      endByte: endByte,\n      size: endByte - startByte\n    };\n  };\n  /**\n   * Returns part metadata + buffer\n   *\n   * @param {FilePartMetadata} meta\n   * @returns {FilePart}\n   * @memberof File\n   */\n\n\n  File.prototype.getPartByMetadata = function (meta, md5Enabled) {\n    if (md5Enabled === void 0) {\n      md5Enabled = true;\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var slice;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._file.slice(meta.startByte, meta.endByte)];\n\n          case 1:\n            slice = _a.sent();\n            return [2\n            /*return*/\n            , Promise.resolve(tslib_1.__assign({}, meta, {\n              buffer: slice,\n              md5: md5Enabled ? md5(slice) : undefined\n            }))];\n        }\n      });\n    });\n  };\n  /**\n   * Returns part chunk\n   *\n   * @param {FilePartMetadata} meta\n   * @param {number} offset\n   * @param {number} chunkSize\n   * @returns {FilePart}\n   * @memberof File\n   */\n\n\n  File.prototype.getChunkByMetadata = function (meta, offset, chunkSize, md5Enabled) {\n    if (md5Enabled === void 0) {\n      md5Enabled = true;\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var startByte, endByte, slice;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            startByte = meta.startByte + offset;\n            endByte = Math.min(startByte + chunkSize, meta.endByte);\n            return [4\n            /*yield*/\n            , this._file.slice(startByte, endByte)];\n\n          case 1:\n            slice = _a.sent();\n            return [2\n            /*return*/\n            , Promise.resolve(tslib_1.__assign({}, meta, {\n              buffer: slice,\n              md5: md5Enabled ? md5(slice) : undefined,\n              size: slice.byteLength,\n              startByte: startByte,\n              endByte: endByte,\n              offset: offset\n            }))];\n        }\n      });\n    });\n  };\n  /**\n   * Cleanup file buffer to release memory\n   *\n   * @memberof File\n   */\n\n\n  File.prototype.release = function () {\n    if (this._file.release) {\n      this._file.release();\n    }\n  };\n\n  File.prototype.toJSON = function () {\n    return {\n      name: this.name,\n      status: this.status,\n      type: this.type,\n      size: this.size,\n      url: this.url,\n      handle: this.handle\n    };\n  };\n\n  return File;\n}();\n\nexport { File };","map":null,"metadata":{},"sourceType":"module"}