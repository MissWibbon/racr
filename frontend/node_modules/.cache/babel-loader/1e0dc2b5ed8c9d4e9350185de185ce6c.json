{"ast":null,"code":"import * as tslib_1 from \"tslib\";\n/*\n * Copyright (c) 2019 by Filestack.\n * Some rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Debug from 'debug';\nimport * as EventEmitter from 'eventemitter3';\nimport { isMobile } from './../../../utils';\nimport { FilestackError } from './../../../../filestack_error'; // regular part size\n\nexport var DEFAULT_PART_SIZE = 6 * 1024 * 1024; // Minimum part size for upload by multipart\n\nexport var MIN_PART_SIZE = 5 * 1024 * 1024; // when mode is set to fallback or intelligent, this part size is required\n\nexport var INTELLIGENT_CHUNK_SIZE = 8 * 1024 * 1024; // Mobile Chunk size for ii\n\nexport var INTELLIGENT_MOBILE_CHUNK_SIZE = 1024 * 1024; // minimum intelligent chunk size\n\nexport var MIN_CHUNK_SIZE = 32 * 1024;\nexport var DEFAULT_STORE_LOCATION = 's3';\nvar debug = Debug('fs:upload:abstract');\n\nvar UploaderAbstract =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(UploaderAbstract, _super);\n\n  function UploaderAbstract(storeOptions, concurrency) {\n    if (concurrency === void 0) {\n      concurrency = 3;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.storeOptions = storeOptions;\n    _this.concurrency = concurrency; // Parts size options\n\n    _this.partSize = DEFAULT_PART_SIZE; // chunk size for ii uploads\n\n    _this.intelligentChunkSize = isMobile() ? INTELLIGENT_MOBILE_CHUNK_SIZE : INTELLIGENT_CHUNK_SIZE;\n    _this.timeout = 30 * 1000;\n    _this.uploadMode = \"default\"\n    /* DEFAULT */\n    ;\n    _this.isModeLocked = false; // if account does not support ii in fallback mode we should abort\n\n    _this.integrityCheck = true;\n    return _this;\n  }\n\n  UploaderAbstract.prototype.setSecurity = function (security) {\n    debug('Set security %O', security);\n    this.security = security;\n  };\n\n  UploaderAbstract.prototype.setApikey = function (apikey) {\n    debug(\"Set apikey to \" + apikey);\n    this.apikey = apikey;\n  };\n\n  UploaderAbstract.prototype.setTimeout = function (timeout) {\n    debug(\"Set request timeout to \" + timeout);\n    this.timeout = timeout;\n  };\n\n  UploaderAbstract.prototype.setRetryConfig = function (cfg) {\n    this.retryConfig = cfg;\n  };\n\n  UploaderAbstract.prototype.setUrl = function (url) {\n    this.url = url;\n  };\n  /**\n   * Set state of checking file integrity\n   * @param state\n   */\n\n\n  UploaderAbstract.prototype.setIntegrityCheck = function (state) {\n    this.integrityCheck = state;\n  };\n  /**\n   * Sets upload mode\n   *\n   * @param {UploadMode} mode\n   * @param {boolean} [lock=false]\n   * @returns\n   * @memberof MultipartUploader\n   */\n\n\n  UploaderAbstract.prototype.setUploadMode = function (mode, lock) {\n    if (lock === void 0) {\n      lock = false;\n    } // this shouldnt happend but for safety reasons if will stay\n\n    /* istanbul ignore next */\n\n\n    if (this.isModeLocked === true) {\n      debug(\"Cannot switch mode to \" + mode + \". Locked! Probably mode is not supported at this apikey\");\n      return;\n    }\n\n    this.isModeLocked = lock;\n    debug(\"Set upload mode to \" + mode);\n    this.uploadMode = mode;\n  };\n  /**\n   * Set upload part size\n   * if part size is smaller than minimum 5mb it will throw error\n   *\n   * @param {number} size\n   * @returns {void}\n   * @memberof S3Uploader\n   */\n\n\n  UploaderAbstract.prototype.setPartSize = function (size) {\n    if (this.uploadMode !== \"default\"\n    /* DEFAULT */\n    ) {\n        debug('Cannot set part size because upload mode is other than default. ');\n        return;\n      }\n\n    debug(\"Set part size to \" + size);\n\n    if (size < MIN_PART_SIZE) {\n      throw new FilestackError('Minimum part size is 5MB');\n    }\n\n    this.partSize = size;\n  };\n  /**\n   * Returns current part size\n   */\n\n\n  UploaderAbstract.prototype.getPartSize = function () {\n    return this.partSize;\n  };\n  /**\n   * Set start part size for ii\n   *\n   * @param {number} size\n   * @memberof S3Uploader\n   */\n\n\n  UploaderAbstract.prototype.setIntelligentChunkSize = function (size) {\n    debug(\"Set inteligent chunk size to \" + size);\n\n    if (size < MIN_CHUNK_SIZE) {\n      throw new FilestackError(\"Minimum intelligent chunk size is \" + MIN_CHUNK_SIZE);\n    }\n\n    this.intelligentChunkSize = size;\n  };\n  /**\n   * Returns intelligent chunk size\n   */\n\n\n  UploaderAbstract.prototype.getIntelligentChunkSize = function () {\n    return this.intelligentChunkSize;\n  };\n  /**\n   * Returns filestack upload url\n   *\n   * @private\n   * @returns\n   * @memberof MultipartUploader\n   */\n\n\n  UploaderAbstract.prototype.getUrl = function () {\n    if (!this.url) {\n      throw new FilestackError('Upload url not set');\n    }\n\n    return this.url;\n  };\n\n  return UploaderAbstract;\n}(EventEmitter);\n\nexport { UploaderAbstract };","map":null,"metadata":{},"sourceType":"module"}